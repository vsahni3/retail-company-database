"""
Author Names : Varun Sahni, Junyuan Chen
Folder Name: classes
File Name: product_class.py
Date and time completed: 2022-01-07 18:45
Assignment Name: Company Database Project
TODO: Create a class to represent the products SQL table which has many useful methods and can create Product instances.
"""

from classes import abstract_class
from classes.abstract_class import use_cursor
from classes.sale_class import Sale
import uiutils


class Product(abstract_class.SQLTable):
    """
    Product class will create instances of Product. Each product will have a unique id, name, number of items in stock and a boolean for whether the product has been deleted.

    Product class will override all of the abstract methods from the SQLTable class using their own implementation.

    This class will also have the load_sales method, which can be used to give a list all of the sales a Product object has been involved in.
    """
    def __init__(self, id, name, price, stock, is_deleted=False):
        """
        Initialize the attributes of each Product object.
        To create an instance of a Product, enter the following arguments:
            id (int) - the unique product id
            name (str) - the product name
            price (float) - the price of the product
            stock (int) - the number of products in stock
            is_deleted (bool) - whether the product has been deleted (no longer carried by Waldo's shoes)
            """
        self.id = id
        self.name = name
        self.price = price
        self.stock = stock
        self.is_deleted = is_deleted

    def __str__(self):
        """
        return string representation using the id, name and price and a strike to indicate whether the product has been deleted

        Returns:
            text (str) - the string representation
        """
        text = f"[ID: {self.id}] {self.name} (${self.price})"
        if self.is_deleted:
            return uiutils.strikethrough(text)
        return text

    @use_cursor
    def _insert(self, cur):
        """
        Insert a new row to the product table using a Product object. Get the product id from the table (autogenerated)to be used when printing the product's info

        Arguments:
            cur (sqlite3 Cursor object) - the cursor to be used to interact with the sql tables
        """

        cur.execute(
            "INSERT INTO products (name, price, stock, is_deleted) "
            "VALUES (?, ?, ?, ?)",
            [self.name, self.price, self.stock, self.is_deleted]
        )
        self.id = cur.lastrowid

    @use_cursor
    def _update(self, cur):
        """
        Update an existing row using a Product object. After loading the Product object to represent the row, one of the values of the object will be changed and then the row will be updated.

        Arguments:
            cur (sqlite3 Cursor object) - the cursor to be used to interact with the sql tables
        """

        cur.execute(
            "UPDATE products SET name = ?, price = ?, "
            "stock = ?, is_deleted = ? WHERE id = ?",
            [self.name, self.price, self.stock, self.is_deleted, self.id]
        )

    @use_cursor
    def destroy(self, cur):
        """
        Delete a row from the table

        Arguments:
            cur (sqlite3 Cursor object) - the cursor to be used to interact with the sql tables
        """
        cur.execute("DELETE FROM products WHERE id = ?", [self.id])

    @use_cursor
    def load_sales(self, cur):
        """
        Load all of the Sale objects and quantities of the product in each sale the product has been involved in

        Arguments:
            cur (sqlite3 Cursor object) - the cursor to be used to interact with the sql tables

        Returns:
            (tuple) - a tuple containing the sales and quantities
        """
        cur.execute(
            "SELECT sale_id, quantity_sold FROM sales_products WHERE product_id = ?",
            [self.id]
        )
        data = cur.fetchall()
        sales = []
        quantities = []
        for id, quantity in data:
            sales.append(Sale.load(id))
            quantities.append(quantity)

        return sales, quantities

    @staticmethod
    def new():
        """
        Create a new Product object using placeholder values.

        Returns:
            (Employee object) - the newly created Employee object
        """
        return Product(None, None, None, None)

    @staticmethod
    def load(id):
        """
        Load a Product object using the id and the load_where method. Raise KeyError if the id does not exist in the table

        Arguments:
            id (int) - the product id
            cur (sqlite3 Cursor object) - the cursor to be used to interact with the sql tables

        Returns:
            (Product object) - the product reprsenting the row
        """
        product = Product.load_where("id = ?", [id])
        if product:
            return product[0]
        print(id)
        raise KeyError(id)

    @staticmethod
    def load_all():
        """
        Load all of the products in the table by calling the load_where method

        Returns:
            result (list) - a list containing the Product objects
        """
        return Product.load_where("1")

    @staticmethod
    @use_cursor
    def load_where(where, args=[], cur=None):
        """
        Load Product objects representing rows which meet a certain condition

        Arguments:
            where (str) - the 'type' of condition which is being checked (for eg: price > ?)
            args (list) - a list containing the values used to check in the condition (for eg: [10.55])
            cur (sqlite3 Cursor object) - the cursor to be used to interact with the sql tables

        Returns:
            (list) - a list of Product objects that meet the condition
        """
        result = []
        cur.execute(
            f"SELECT id, name, price, stock, is_deleted "
            f"FROM products WHERE {where}",
            args
        )
        for data in cur.fetchall():
            id, name, price, stock, is_deleted = data
            result.append(Product(id, name, price, stock, is_deleted))
        return result

    @staticmethod
    def load_many(ids):
        """
        Load multiple Product objects/rows using a list of ids and load_where

        Arguments:
            ids - the list of ids to use to load objects

        Returns:
            (list) - a list of Product objects, one for every id
        """
        args = ", ".join(["?"] * len(ids))
        return Product.load_where(f"id IN ({args})", ids)